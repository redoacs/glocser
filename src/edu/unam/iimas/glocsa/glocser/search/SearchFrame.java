/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchFrame.java
 *
 * Created on Jan 6, 2010, 3:05:45 PM
 */

package edu.unam.iimas.glocsa.glocser.search;

import edu.unam.iimas.glocsa.glocser.GlocserFrame;
import edu.unam.iimas.alignment.DynamicAlignment;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author xaltonalli
 */
public class SearchFrame extends javax.swing.JFrame {

    private GlocserFrame glocserFrame;
    private ArrayList<ArrayList<Integer>> matches;

    /** Creates new form SearchFrame */
    public SearchFrame(GlocserFrame glocserFrame) {
        
        this.glocserFrame = glocserFrame;

        initComponents();

        buttonGroupSearchType.add(jRadioButtonExactSearch);
        buttonGroupSearchType.add(jRadioButtonPolySearch);
        buttonGroupSearchType.setSelected(jRadioButtonExactSearch.getModel(), true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSearchType = new javax.swing.ButtonGroup();
        jTextFieldSearch = new javax.swing.JTextField();
        jLabelSearch = new javax.swing.JLabel();
        jButtonSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableMatches = new javax.swing.JTable();
        jLabelSearchCount = new javax.swing.JLabel();
        jRadioButtonExactSearch = new javax.swing.JRadioButton();
        jRadioButtonPolySearch = new javax.swing.JRadioButton();

        setTitle("Search");

        jLabelSearch.setText("Sequence to search:");

        jButtonSearch.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jTableMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "seq-#", "start"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMatches.getTableHeader().setReorderingAllowed(false);
        jTableMatches.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMatchesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableMatches);

        jLabelSearchCount.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelSearchCount.setText("No search has been done.");

        jRadioButtonExactSearch.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jRadioButtonExactSearch.setText("Exact search");

        jRadioButtonPolySearch.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jRadioButtonPolySearch.setText("Match polymorphisms");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSearch)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelSearchCount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSearch))
                    .addComponent(jRadioButtonExactSearch)
                    .addComponent(jRadioButtonPolySearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSearch)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonSearch)
                            .addComponent(jLabelSearchCount))
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonExactSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonPolySearch))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed

        String searchString = jTextFieldSearch.getText();
        searchString = searchString.toUpperCase();

        if(buttonGroupSearchType.isSelected(jRadioButtonPolySearch.getModel())) {
            searchString = searchString.replace("A", "[ARMWDHVN]");
            searchString = searchString.replace("C", "[CYMSBHVN]");
            searchString = searchString.replace("G", "[GRKSBDVN]");
            searchString = searchString.replace("T", "[TYKWBDHN]");
        }

//        searchString = searchString.replace("N", "[ACGT]");
//        searchString = searchString.replace("M", "[AC]");
//        searchString = searchString.replace("R", "[AG]");
//        searchString = searchString.replace("W", "[AT]");
//        searchString = searchString.replace("S", "[CG]");
//        searchString = searchString.replace("Y", "[CT]");
//        searchString = searchString.replace("K", "[GT]");
//        searchString = searchString.replace("V", "[ACG]");
//        searchString = searchString.replace("H", "[ACT]");
//        searchString = searchString.replace("D", "[AGT]");
//        searchString = searchString.replace("B", "[CGT]");


        //jTextFieldSearch.setText(searchString);

        glocserFrame.getAlignmentOnlyPanel().clearHighLigths();
        matches = new ArrayList<ArrayList<Integer>>();

        DynamicAlignment openDynamicAlignment = glocserFrame.getOpenDynamicAlignment();
        int nSequences = openDynamicAlignment.getNumberOfSequences();
        
        ArrayList<ArrayList<Character>> unlignedMatrix = openDynamicAlignment.getUnAlignedMatrix();
        ArrayList<Integer> numberSymbolsTaxa = openDynamicAlignment.getNumberSymbolsPerSequence();

        int matchCount = 0;

        Pattern searchPattern = Pattern.compile(searchString);
        Matcher sequenceMatcher = null;

        String[] columnNames = {"seq-#","start"};

        for(int i = 0 ; i < nSequences ; i++) {

            //String aSequence = new String(unlignedMatrix.get(i).toArray(new Character[1])) ;

            ArrayList<Character> unAlignedMatrixLine = unlignedMatrix.get(i);
            int numberSymbols = numberSymbolsTaxa.get(i);
            StringBuffer sequenceSB = new StringBuffer(numberSymbols);
            for (int j = 0 ; j < numberSymbols ; j++){
                sequenceSB.append(unAlignedMatrixLine.get(j));
            }
            
            String aSequence = new String(sequenceSB.toString());

            sequenceMatcher = searchPattern.matcher(aSequence);

//            int matchStart = aSequence.indexOf(searchString);
//            int offset = 0;
//            while (matchStart != -1){
//
//                matchCount++;
//                ArrayList<Integer> match = new ArrayList<Integer>();
//               // match.add(matchCount);
//                match.add(i);
//                match.add(matchStart+offset);
//                matches.add(match);
//
//                offset += matchStart + searchString.length();
//                matchStart = aSequence.substring(offset).indexOf(searchString);
//
//            }

            boolean isThereMatch = sequenceMatcher.find();
            int offset = 0;
            while (isThereMatch){

                matchCount++;
                ArrayList<Integer> match = new ArrayList<Integer>();
                match.add(i);
                match.add(sequenceMatcher.start());
                match.add(sequenceMatcher.end());
                matches.add(match);
                isThereMatch = sequenceMatcher.find();

            }
        }

        Integer[][] matchesData = new Integer[matchCount][2];
        ArrayList<ArrayList<Integer>>gapOffestMatrix = glocserFrame.getOpenDynamicAlignment().getGapOffsetMatrix();
        //int[] regionParameters = new int[3];

        for (int i = 0 ; i < matchCount ; i++) {
            ArrayList<Integer> match = matches.get(i);
           
            matchesData[i][0] = match.get(0);
            matchesData[i][1] = match.get(1) + gapOffestMatrix.get(match.get(0)).get(match.get(1));


            glocserFrame.getAlignmentOnlyPanel().highlightRegion( match.get(0), match.get(1), match.get(2)-match.get(1));
            //glocserFrame.getAlignmentOnlyPanel().fireAlignmentTableRegionUpdated(matchesData[i][1], matchesData[i][2], searchString.length());
        }

        //DefaultTableModel tableModel = new DefaultTableModel(matchesData, columnNames);

        //jTableMatches.setModel(tableModel);

        jTableMatches.setModel(new javax.swing.table.DefaultTableModel(
            matchesData,
            columnNames
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jLabelSearchCount.setText(matches.size() + " matches found");

    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTableMatchesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMatchesMouseClicked

        int selectedRow = jTableMatches.getSelectedRow();

        //String searchString = jTextFieldSearch.getText();

        //int sequenceNumber =  Integer.parseInt( jTableMatches.getModel().getValueAt(selectedRow, 0).toString() );
        //int startPosition =  Integer.parseInt( jTableMatches.getModel().getValueAt(selectedRow, 1).toString() );
        int sequenceNumber =  Integer.parseInt( matches.get(selectedRow).get(0).toString() );
        int startUnAlignedPosition =  Integer.parseInt( matches.get(selectedRow).get(1).toString() );
        int endUnAlignedPosition = Integer.parseInt( matches.get(selectedRow).get(2).toString() );
        int length = endUnAlignedPosition - startUnAlignedPosition;
        
        glocserFrame.getAlignmentOnlyPanel().selectSymbolsInSequence(sequenceNumber, startUnAlignedPosition, length);

    }//GEN-LAST:event_jTableMatchesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupSearchType;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelSearchCount;
    private javax.swing.JRadioButton jRadioButtonExactSearch;
    private javax.swing.JRadioButton jRadioButtonPolySearch;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableMatches;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

}
