/*
 * GapSizeChartTablePanel.java
 *
 * Created on October 21, 2008, 2:12 AM
 */
package edu.unam.iimas.glocsa.glocser.glocsadetails;

import edu.unam.iimas.alignment.Alignment;
import edu.unam.iimas.alignment.glocsa.core.GapCounter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.table.TableModel;

/**
 *
 * @author  xaltonalli
 */
public class GapSizeChartTablePanel extends javax.swing.JPanel {

    private Alignment alignment = null;
    private ArrayList<Integer> allGapSizes;
    private Integer biggestGapSize =null;
    private Integer smallerGapSize = null;

    public void createChart() {
        createFilledTableModel();
        gapSizeChartPanel1.createChart();
    }

    private void createFilledTableModel() {

        int gaps = allGapSizes.size();
        Integer[][] data = null;

        if (gaps > 0) {
            int[] gapCountBySize = new int[biggestGapSize];

            for (int i = 0; i < gaps; i++) {
                gapCountBySize[allGapSizes.get(i) - 1]++;
            }


            ArrayList<Integer> nonZeroOccurenceSizes = new ArrayList<Integer>(); // size 1 is a 1 not 0
            ArrayList<Integer> nonZeroOccurenceSizesOccurences = new ArrayList<Integer>();

            for (int i = 0; i < biggestGapSize; i++) {
                if (gapCountBySize[i] != 0) {
                    nonZeroOccurenceSizes.add(i + 1);
                    nonZeroOccurenceSizesOccurences.add(gapCountBySize[i]);
                }
            }


            data = new Integer[nonZeroOccurenceSizes.size()][2];

            for (int i = 0; i < data.length; i++) {
                data[i][0] = nonZeroOccurenceSizes.get(i);
                data[i][1] = nonZeroOccurenceSizesOccurences.get(i);
            }


        } else {
            
        }

        TableModel tableModel = new javax.swing.table.DefaultTableModel(
                    data,
                    new String[]{
                        "Size", "#"
                    }) {

                Class[] types = new Class[]{
                    java.lang.Integer.class, java.lang.Integer.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            };

            jTable1.setModel(tableModel);

    }

    /** Creates new form GapSizeChartTablePanel */
    public GapSizeChartTablePanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gapSizeChartPanel1 = new edu.unam.iimas.glocsa.glocser.glocsadetails.GapSizeChartPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        javax.swing.GroupLayout gapSizeChartPanel1Layout = new javax.swing.GroupLayout(gapSizeChartPanel1);
        gapSizeChartPanel1.setLayout(gapSizeChartPanel1Layout);
        gapSizeChartPanel1Layout.setHorizontalGroup(
            gapSizeChartPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
        );
        gapSizeChartPanel1Layout.setVerticalGroup(
            gapSizeChartPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Size", "#"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setHeaderValue("Size");
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setHeaderValue("#");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gapSizeChartPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(gapSizeChartPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private edu.unam.iimas.glocsa.glocser.glocsadetails.GapSizeChartPanel gapSizeChartPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public Alignment getAlignment() {
        return alignment;
    }

    public void setAlignment(Alignment alignment) {
        this.alignment = alignment;

        ArrayList<HashMap<Integer, Integer>> gapExistence = GapCounter.getGapExistenceOfAlignment(alignment);
        int numberOfSequences = gapExistence.size();
        allGapSizes = new ArrayList<Integer>();
        HashMap<Integer, Integer> gapsInTaxa = null;
        Collection<Integer> gapSizesInTaxa = null;
        Iterator<Integer> gapSizesInTaxaIterator = null;
        Integer gapSize = null;
        biggestGapSize = 0;
        smallerGapSize = 0;

        for (int i = 0; i < numberOfSequences; i++) {

            gapsInTaxa = gapExistence.get(i);
            gapSizesInTaxa = gapsInTaxa.values();
            gapSizesInTaxaIterator = gapSizesInTaxa.iterator();

            while (gapSizesInTaxaIterator.hasNext()) {

                gapSize = gapSizesInTaxaIterator.next();

                if (gapSize > biggestGapSize) {
                    biggestGapSize = gapSize;
                }

                if (smallerGapSize == 0) {
                    smallerGapSize = gapSize;
                } else if (gapSize < smallerGapSize) {
                    smallerGapSize = gapSize;
                }

                allGapSizes.add(gapSize);

            }

        }

        gapSizeChartPanel1.setAlignment(alignment);
        gapSizeChartPanel1.setAllGapSizes(allGapSizes);
        gapSizeChartPanel1.setBiggestGapSize(biggestGapSize);
        gapSizeChartPanel1.setSmallerGapSize(smallerGapSize);
    }
}
