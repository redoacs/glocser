/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SCGMatrixPanel.java
 *
 * Created on Jun 14, 2010, 1:25:09 PM
 */
package edu.unam.iimas.glocsa.glocser.glocsadetails;

import edu.unam.iimas.alignment.Alignment;
import edu.unam.iimas.alignment.glocsa.core.Gap;
import edu.unam.iimas.alignment.glocsa.core.GapCounter;
import edu.unam.iimas.alignment.glocsa.core.SGCMatrix;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author redoacs
 */
public class SCGMatrixPanel extends javax.swing.JPanel {

    private Alignment alignment;
    private SGCMatrix sgcMatrix;
    private File openAlignmentFile;

    /** Creates new form SCGMatrixPanel */
    public SCGMatrixPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        h86FileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        sgcMatrixTextArea = new javax.swing.JTextArea();
        generateH86FileButton = new javax.swing.JButton();
        saveH86FileButton = new javax.swing.JButton();

        sgcMatrixTextArea.setColumns(20);
        sgcMatrixTextArea.setRows(5);
        jScrollPane1.setViewportView(sgcMatrixTextArea);

        generateH86FileButton.setText("Generate H86 File");
        generateH86FileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateH86FileButtonActionPerformed(evt);
            }
        });

        saveH86FileButton.setText("Save H86 File ...");
        saveH86FileButton.setEnabled(false);
        saveH86FileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveH86FileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generateH86FileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveH86FileButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveH86FileButton)
                    .addComponent(generateH86FileButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generateH86FileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateH86FileButtonActionPerformed
        outputSGCMatrix();
        saveH86FileButton.setEnabled(true);
    }//GEN-LAST:event_generateH86FileButtonActionPerformed

    private void saveH86FileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveH86FileButtonActionPerformed

        int result = h86FileChooser.showSaveDialog(this);
        File selectedFile;

        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                selectedFile = h86FileChooser.getSelectedFile();
                FileWriter fileWriter = new FileWriter(selectedFile);
                fileWriter.write(sgcMatrixTextArea.getText());
                fileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(SCGMatrixPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error: File could not be saved.", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_saveH86FileButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateH86FileButton;
    private javax.swing.JFileChooser h86FileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveH86FileButton;
    private javax.swing.JTextArea sgcMatrixTextArea;
    // End of variables declaration//GEN-END:variables

    private void outputSGCMatrix() {
        StringWriter stringWriter = new StringWriter();
        PrintWriter printWriter = new PrintWriter(stringWriter);

        Gap[] gaps = sgcMatrix.getGaps();
        String[] names = sgcMatrix.getNames();
        char[][] exist = sgcMatrix.getExist();

        int nGaps = gaps.length;
        int numberOfSequences = names.length;


        printWriter.println("xread");

        printWriter.println("'");
        printWriter.println("Hennig86 file for the SCG Matrix of " + openAlignmentFile.getName() + " , generated by glocser");
        printWriter.println("The characters are the gaps in the alignment, denoted as [position , size], where position is the position in which the gap starts, and size is the number of contiguous positions coded as gaps.");

        for (int j = 0; j < nGaps - 1; j++) {
            printWriter.print("[" + gaps[j] + "] , ");
        }
        printWriter.println("[" + gaps[nGaps - 1] + "]");

        printWriter.println("");

        printWriter.println("'");


        printWriter.println(nGaps + " " + numberOfSequences);

        for (int i = 0; i < numberOfSequences; i++) {


            printWriter.print(names[i] + " ");

            for (int j = 0; j < nGaps; j++) {
                printWriter.print(exist[i][j]);
            }

            printWriter.println("");

        }

        printWriter.println(";");
        printWriter.println("proc/;");

        sgcMatrixTextArea.setText(stringWriter.toString());

    }

    /**
     * @return the alignment
     */
    public Alignment getAlignment() {
        return alignment;
    }

    /**
     * @param alignment the alignment to set
     */
    public void setAlignment(Alignment alignment) {
        this.alignment = alignment;
        sgcMatrix = GapCounter.createSGCMatrix(alignment);
    }

    /**
     * @return the openAlignmentFile
     */
    public File getOpenAlignmentFile() {
        return openAlignmentFile;
    }

    /**
     * @param openAlignmentFile the openAlignmentFile to set
     */
    public void setOpenAlignmentFile(File openAlignmentFile) {
        this.openAlignmentFile = openAlignmentFile;
    }
}
