/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AlignmentComparatorFrame.java
 *
 * Created on Jul 1, 2010, 5:15:15 PM
 */
package edu.unam.iimas.glocsa.glocser.comparate.frame;

import edu.unam.iimas.glocsa.glocser.GlocserFrame;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Edgar D. Arenas-DÃ­az
 */
public class AlignmentComparisonSelectorFrame extends javax.swing.JFrame {

    private GlocserFrame sourceAlignmentGlocserFrame;
    private List<GlocserFrame> targetAlignmentGlocserFrames;
    private List<Integer> glocserFrameIndexes;

    /** Creates new form AlignmentComparatorFrame */
    public AlignmentComparisonSelectorFrame(GlocserFrame sourceAlignmentGlocserFrame, List<GlocserFrame> targetAlignmentGlocserFrames) {
        initComponents();
        this.sourceAlignmentGlocserFrame = sourceAlignmentGlocserFrame;
        this.targetAlignmentGlocserFrames = targetAlignmentGlocserFrames;
        jLabelSourceAlignment.setText(sourceAlignmentGlocserFrame.getSelectedFile().getName());
        populateTargetComboBox();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelSourceAlignment = new javax.swing.JLabel();
        jComboBoxTargetAlignment = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonCompare = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select alignment to compare");

        jLabelSourceAlignment.setText("source alignment");

        jLabel1.setText("Compare:");

        jLabel2.setText("To:");

        jButtonCompare.setText("Comapre");
        jButtonCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompareActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelSourceAlignment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                            .addComponent(jComboBoxTargetAlignment, javax.swing.GroupLayout.Alignment.TRAILING, 0, 358, Short.MAX_VALUE)))
                    .addComponent(jButtonCompare, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSourceAlignment)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTargetAlignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCompare)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompareActionPerformed

        GlocserFrameItem gfItem = (GlocserFrameItem) jComboBoxTargetAlignment.getSelectedItem();
        AlignmentComparatorFrame comparatorFrame = new AlignmentComparatorFrame(sourceAlignmentGlocserFrame, targetAlignmentGlocserFrames.get(gfItem.listIndex));
        comparatorFrame.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jButtonCompareActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCompare;
    private javax.swing.JComboBox jComboBoxTargetAlignment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelSourceAlignment;
    // End of variables declaration//GEN-END:variables

    public final void populateTargetComboBox() {
        int nGlocserFrames = targetAlignmentGlocserFrames.size();
        glocserFrameIndexes = new ArrayList<Integer>(nGlocserFrames);
        jComboBoxTargetAlignment.removeAllItems();
        GlocserFrame glocserFrame;
        for (int i = 0; i < nGlocserFrames; i++) {
            glocserFrame = targetAlignmentGlocserFrames.get(i);
            if (sourceAlignmentGlocserFrame != glocserFrame) {
                jComboBoxTargetAlignment.addItem(
                        new GlocserFrameItem(i, glocserFrame.getSelectedFile().getName()));
            }
        }
    }

    /**
     * @return the sourceAlignmentGlocserFrame
     */
    public GlocserFrame getSourceAlignmentGlocserFrame() {
        return sourceAlignmentGlocserFrame;
    }

    /**
     * @param sourceAlignmentGlocserFrame the sourceAlignmentGlocserFrame to set
     */
    public void setSourceAlignmentGlocserFrame(GlocserFrame sourceAlignmentGlocserFrame) {
        this.sourceAlignmentGlocserFrame = sourceAlignmentGlocserFrame;
    }

    /**
     * @return the targetAlignmentGlocserFrames
     */
    public List<GlocserFrame> getTargetAlignmentGlocserFrames() {
        return targetAlignmentGlocserFrames;
    }

    /**
     * @param targetAlignmentGlocserFrames the targetAlignmentGlocserFrames to set
     */
    public void setTargetAlignmentGlocserFrames(List<GlocserFrame> targetAlignmentGlocserFrames) {
        this.targetAlignmentGlocserFrames = targetAlignmentGlocserFrames;
    }

    private class GlocserFrameItem {

        private int listIndex;
        private String fileName;

        public GlocserFrameItem(int listIndex, String fileName) {
            this.listIndex = listIndex;
            this.fileName = fileName;
        }

        @Override
        public String toString() {
            return listIndex + " - " + fileName;
        }
    }
}
